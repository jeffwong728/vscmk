cmake_minimum_required(VERSION 3.0.0)
project(apue VERSION 0.1.0 LANGUAGES CXX C)
set(CMAKE_DEBUG_POSTFIX "d")

if (WIN32)
  # Set utf-8 charset to avoid compile error C2001
  add_compile_options("/utf-8")
  add_compile_options("/bigobj")
endif()

include(CTest)
enable_testing()
add_executable(apue main.cpp)

find_package(ZLIB REQUIRED)
find_package(hdf5 CONFIG REQUIRED)
find_package(TBB CONFIG REQUIRED)

if(UNIX) 
    set(Boost_USE_STATIC_LIBS ON)
    find_package(Threads)
    target_link_libraries(apue PRIVATE hdf5::hdf5-static hdf5::hdf5_hl-static hdf5::hdf5_cpp-static hdf5::hdf5_hl_cpp-static)
    target_link_libraries(apue PRIVATE ${CMAKE_THREAD_LIBS_INIT})
else()
    target_link_libraries(apue PRIVATE hdf5::hdf5-shared hdf5::hdf5_hl-shared hdf5::hdf5_cpp-shared hdf5::hdf5_hl_cpp-shared)
endif()

if(WIN32 AND MSVC)
    include(SelectLibraryConfigurations)
    include(FindPackageHandleStandardArgs)
    macro(FindVCPkgLibrary LIBNAME LIB_D LIB_R)
            find_library(${LIBNAME}_LIBRARY_DEBUG NAMES ${LIB_D} PATHS "$ENV{VCPKG_DIR}/debug/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
            find_library(${LIBNAME}_LIBRARY_RELEASE NAMES ${LIB_R} PATHS "$ENV{VCPKG_DIR}/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
            select_library_configurations(${LIBNAME})
            find_package_handle_standard_args(${LIBNAME} FOUND_VAR ${LIBNAME}_FOUND REQUIRED_VARS ${LIBNAME}_LIBRARY)
            set(${LIBNAME}_LIBRARIES "${${LIBNAME}_LIBRARY}")
    endmacro()

    find_library(CAIRO_LIBRARY_DEBUG NAMES cairod PATHS "$ENV{VCPKG_DIR}/debug/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
    find_library(CAIRO_LIBRARY_RELEASE NAMES cairo PATHS "$ENV{VCPKG_DIR}/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)

    FindVCPkgLibrary(GTK3 gtk-3.0 gtk-3.0)
    FindVCPkgLibrary(GDK3 gdk-3.0 gdk-3.0)
    FindVCPkgLibrary(GIO gio-2.0 gio-2.0)
    FindVCPkgLibrary(GLIB glib-2.0 glib-2.0)
    FindVCPkgLibrary(CAIRO cairod cairo)
    FindVCPkgLibrary(PANGOCAIRO pangocairo-1.0 pangocairo-1.0)
    FindVCPkgLibrary(GDK_PIXBUF gdk_pixbuf-2.0 gdk_pixbuf-2.0)
    FindVCPkgLibrary(PANGO pango-1.0 pango-1.0)
    FindVCPkgLibrary(GOBJECT gobject-2.0 gobject-2.0)
    FindVCPkgLibrary(GTHREAD gthread-2.0 gthread-2.0)
    FindVCPkgLibrary(GMODULE gmodule-2.0 gmodule-2.0)

    add_executable(gtkhello gtk_hello.c)
    target_include_directories(gtkhello PRIVATE "$ENV{VCPKG_DIR}/include")
    target_link_libraries(gtkhello optimized "${GTK3_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GDK3_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${CAIRO_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GIO_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${PANGOCAIRO_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GDK_PIXBUF_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${PANGO_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GOBJECT_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GTHREAD_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GLIB_LIBRARY_RELEASE}")
    target_link_libraries(gtkhello optimized "${GMODULE_LIBRARY_RELEASE}")

    target_link_libraries(gtkhello debug "${GTK3_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GDK3_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${CAIRO_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GIO_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${PANGOCAIRO_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GDK_PIXBUF_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${PANGO_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GOBJECT_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GTHREAD_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GLIB_LIBRARY_DEBUG}")
    target_link_libraries(gtkhello debug "${GMODULE_LIBRARY_DEBUG}")

    set_target_properties(gtkhello PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
endif()

find_package(Boost 1.72.0 REQUIRED COMPONENTS chrono filesystem)
target_link_libraries(apue PRIVATE TBB::tbb)
target_link_libraries(apue PRIVATE Boost::filesystem Boost::chrono)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)