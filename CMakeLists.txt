cmake_minimum_required(VERSION 3.18)
project(apue VERSION 0.1.0 LANGUAGES CXX C)
set(CMAKE_DEBUG_POSTFIX "_d")

if (WIN32)
  # Set utf-8 charset to avoid compile error C2001
  add_compile_options("/utf-8")
  add_compile_options("/bigobj")
endif()

if(UNIX) 
    set(Boost_USE_STATIC_LIBS ON)
endif()

include(CTest)
enable_testing()
add_executable(apue main.cpp)

find_package(ZLIB REQUIRED)
find_package(hdf5 CONFIG REQUIRED)
find_package(TBB CONFIG REQUIRED)
find_package(Boost 1.72.0 REQUIRED COMPONENTS chrono filesystem)

if(UNIX) 
    find_package(Threads)
    target_link_libraries(apue PRIVATE hdf5::hdf5-static hdf5::hdf5_hl-static hdf5::hdf5_cpp-static hdf5::hdf5_hl_cpp-static)
    target_link_libraries(apue PRIVATE ${CMAKE_THREAD_LIBS_INIT})
else()
    target_link_libraries(apue PRIVATE hdf5::hdf5-shared hdf5::hdf5_hl-shared hdf5::hdf5_cpp-shared hdf5::hdf5_hl_cpp-shared)
endif()

target_link_libraries(apue PRIVATE TBB::tbb)
target_link_libraries(apue PRIVATE Boost::filesystem Boost::chrono)

add_executable(gtkhello gtk_hello.c builder.ui)
add_executable(sunny sunny.c)
add_executable(tool_palette tool_palette.c)
add_executable(application10 application10/exampleapp.c application10/exampleapp.h application10/exampleappprefs.c application10/exampleappprefs.h application10/exampleappwin.c application10/exampleappwin.h application10/main.c application10/resources.c)

set(gtktargets)
list(APPEND gtktargets gtkhello)
list(APPEND gtktargets sunny)
list(APPEND gtktargets tool_palette)
list(APPEND gtktargets application10)

if(WIN32 AND MSVC)
    list(APPEND CMAKE_MODULE_PATH "$ENV{SPAM_ROOT_DIR}/cmake")
    find_package(VCPKG REQUIRED COMPONENTS gtk3 gdk3 cairo gio pangocairo gdk_pixbuf pango gobject gthread glib gmodule cairomm)
    list(POP_BACK CMAKE_MODULE_PATH)

    foreach(t ${gtktargets})
        target_link_libraries(${t} PRIVATE VCPKG::gtk3)
        target_link_libraries(${t} PRIVATE VCPKG::gdk3)
        target_link_libraries(${t} PRIVATE VCPKG::cairo)
        target_link_libraries(${t} PRIVATE VCPKG::gio)
        target_link_libraries(${t} PRIVATE VCPKG::pangocairo)
        target_link_libraries(${t} PRIVATE VCPKG::gdk_pixbuf)
        target_link_libraries(${t} PRIVATE VCPKG::pango)
        target_link_libraries(${t} PRIVATE VCPKG::gobject)
        target_link_libraries(${t} PRIVATE VCPKG::gthread)
        target_link_libraries(${t} PRIVATE VCPKG::glib)
        target_link_libraries(${t} PRIVATE VCPKG::gmodule)
        set_target_properties(${t} PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
    endforeach()
endif()

add_executable(minimal WIN32 MACOSX_BUNDLE "")
add_subdirectory(minimal)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)